{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Cloud Made Easy with Mr. Cloud Explorer!</p> <ul> <li>Plan</li> <li>Design </li> <li>Deploy</li> <li>Maintain</li> </ul> <p>Don't Just Deploy, Control It!</p> <p>Get Started Now!</p> <p>\u2764\ufe0f Show Your support! </p> <p></p>"},{"location":"about/","title":"About","text":"<p>Learn about key services like compute, storage, databases, and more.</p> <p>Become a cloud user without the headache and the bill shock, hopefully.</p> <p></p> <p>I can't guarantee it won't feel like burning money sometimes, but at least you'll understand the bill!!!</p>"},{"location":"AWS_services/Aurora/aurora/","title":"Aurora","text":"<p>Aurora</p>"},{"location":"AWS_services/Auto_Scaling/auto_scaling/","title":"Auto Scaling","text":"<p>auto scaling</p>"},{"location":"AWS_services/CloudFormation/cloudformation/","title":"CloudFormation","text":"<p>CloudFormation</p>"},{"location":"AWS_services/CloudFront/cloudfront/","title":"CloudFront","text":"<p>CloudFront</p>"},{"location":"AWS_services/CloudTrail/cloudtrail/","title":"CloudTrail","text":"<p>CloudTrail</p>"},{"location":"AWS_services/CloudWatch/cloudwatch/","title":"CloudWatch","text":"<p>CloudWatch</p>"},{"location":"AWS_services/DynamoDB/dynamodb/","title":"DynamoDB","text":"<p>DynamoDB</p>"},{"location":"AWS_services/EC2/ec2/","title":"EC2","text":""},{"location":"AWS_services/EC2/ec2/#step-1-connect-to-your-ec2-instance","title":"Step 1: Connect to Your EC2 Instance","text":"<p>Use SSH to connect to your Amazon Linux EC2 instance. Replace <code>your-instance-ip</code> with your instance's public IP address:</p> <pre><code>ssh -i your-key.pem ec2-user@your-instance-ip\n</code></pre>"},{"location":"AWS_services/EC2/ec2/#step-2-update-the-package-repository","title":"Step 2: Update the Package Repository","text":"<p>It's a good practice to update the package repository to ensure you are installing the latest software packages:</p> <pre><code>sudo yum update -y\n</code></pre>"},{"location":"AWS_services/EC2/ec2/#step-3-install-apache-web-server","title":"Step 3: Install Apache Web Server","text":"<p>Install the Apache web server with the following command:</p> <pre><code>sudo yum install httpd -y\n</code></pre>"},{"location":"AWS_services/EC2/ec2/#step-4-start-the-apache-service","title":"Step 4: Start the Apache Service","text":"<p>Start the Apache service and enable it to start automatically on boot:</p> <pre><code>sudo systemctl start httpd\nsudo systemctl enable httpd\nsudo systemctl status httpd\n</code></pre>"},{"location":"AWS_services/EC2/ec2/#step-5-create-the-html-file","title":"Step 5: Create the HTML File","text":"<p>You can use a text editor like <code>nano</code> or <code>vim</code> to create a simple HTML file. Here, we'll use <code>nano</code>:</p> <pre><code>sudo nano /var/www/html/index.html\n</code></pre> <p>Add the following content to the <code>index.html</code> file:</p> <p>Index.html File</p> <p>Save the file and exit the text editor (for <code>nano</code>, press <code>Ctrl + O</code>, then press <code>Enter</code>, and then press <code>Ctrl + X</code> to exit).</p>"},{"location":"AWS_services/EC2/ec2/#step-6-configure-security-group","title":"Step 6: Configure Security Group","text":"<p>Make sure that your EC2 instance's security group allows incoming traffic on port 80 (HTTP). You can do this in the AWS Management Console by modifying the security group associated with your EC2 instance.</p>"},{"location":"AWS_services/EC2/ec2/#step-7-access-your-web-page","title":"Step 7: Access Your Web Page","text":"<p>You should now be able to access your web page by opening a web browser and entering your EC2 instance's public IP address in the address bar. You should see the \"Happy Learning, Mr.CloudExplorer!\" message displayed on the web page.</p> <p></p> <p>That's it! You've successfully set up a web server and created a simple HTML page on your Amazon Linux EC2 instance. You can further customize and expand your web application as needed.</p>"},{"location":"AWS_services/ElastiCache/elasticache/","title":"ElastiCache","text":"<p>ElastiCache</p>"},{"location":"AWS_services/Elastic_Block_Store/ebs/","title":"Elastic Block Store","text":"<p>EBS</p>"},{"location":"AWS_services/Elastic_File_System/efs/","title":"Elastic File System","text":"<p>Elastic File System</p>"},{"location":"AWS_services/Elastic_Load_Balancer/elb/","title":"Elastic Load Balancer","text":"<p>ELB</p>"},{"location":"AWS_services/Glacier/glacier/","title":"Glacier","text":"<p>Glacier</p>"},{"location":"AWS_services/Identity%20and_Access_Management/iam/","title":"Identity and Access Management","text":"<p>Identity and Access Management</p>"},{"location":"AWS_services/Kinesis/kinesis/","title":"Kinesis","text":"<p>Kinesis</p>"},{"location":"AWS_services/Lambda/lambda/","title":"Lambda","text":""},{"location":"AWS_services/Network_Access_Control_List/nacl/","title":"Network Access Control List","text":"<p>Network Access Control List</p>"},{"location":"AWS_services/OpsWorks/opsworks/","title":"OpsWorks","text":"<p>OpsWorks</p>"},{"location":"AWS_services/Relational_Database_Service/rds/","title":"Relational Database Service","text":"<p>Relational Database Service</p>"},{"location":"AWS_services/Route_53/route_53/","title":"Route 53","text":"<p>Route 53</p>"},{"location":"AWS_services/S3/s3/","title":"S3","text":"<p>S3</p>"},{"location":"AWS_services/Simple_Notification_Service/sns/","title":"Simple Notification Service","text":"<p>Simple Notification Service</p>"},{"location":"AWS_services/Simple_Queue_Service/sqs/","title":"Simple Queue Service","text":"<p>Simple Queue Service</p>"},{"location":"AWS_services/Simple_Workflow_Service/swf/","title":"Simple Workflow Service","text":"<p>Simple Workflow Service</p>"},{"location":"AWS_services/Storage_Gateway/storage_gateway/","title":"Storage Gateway","text":"<p>Storage Gateway</p>"},{"location":"AWS_services/VPC/vpc/","title":"VPC","text":"<p>VPC</p>"},{"location":"AWS_services/intro/intro/","title":"Core AWS Services","text":""},{"location":"Architecture/intro/","title":"Index","text":"Architecture Type Description One-Tier Architecture A single-layer architecture where the application and database reside on the same machine. Two-Tier Architecture Divides the application into a client and a server, with the database usually residing on the server. Three-Tier Architecture Separates the application into three layers: presentation, logic, and data, typically hosted on different servers. N-Tier Architecture Extends the three-tier architecture to include more layers, enhancing scalability and flexibility. Serverless Architecture Runs applications without managing the underlying infrastructure, relying on cloud services to handle server provisioning and scaling. Microservices Architecture Breaks down applications into small, loosely coupled services that can be developed, deployed, and scaled independently. Event-Driven Architecture Uses events to trigger and communicate between decoupled services, allowing for more responsive and scalable systems. Hybrid Architecture Combines multiple architectural styles to leverage the benefits of each, often mixing on-premises and cloud environments."},{"location":"Architecture/Event_Driven/event_driven/","title":"Event-Driven","text":"<p>Events trigger automated tasks</p>"},{"location":"Architecture/Hybrid/hybrid/","title":"Hybrid","text":"<p>Mix of cloud &amp; on-premises servers</p>"},{"location":"Architecture/Microservices/microservices/","title":"Microservices","text":"<p>Independent services working together</p>"},{"location":"Architecture/N_Tier/n_tier/","title":"N-Tier","text":"<p>Flexible tiers for complex applications (includes Three-Tier)</p> <p>Technologies</p> <ul> <li>(Powerful Python) Django (Python), RDS (AWS), Postgres DB</li> </ul> <p>AWS</p> <ul> <li>ECS 2 various container, Database Lambda Function, Database - RDS, DynamoDB, ALB, VPC, CloudWatch</li> </ul>"},{"location":"Architecture/One_Tier/one_tier/","title":"One-Tier","text":"<p>All-in-one, Simple Static Site</p> <p>Technologies - HTML, CSS, JavaScript, React</p> <p>AWS</p> <ul> <li>S3, VPC, Amazon CloudFront</li> </ul>"},{"location":"Architecture/Serverless/serverless/","title":"Serverless","text":"<p>Code runs on events, with no server management</p> <p>AWS</p> <ul> <li>AWS Lambda</li> </ul>"},{"location":"Architecture/Three_Tier/three_tier/","title":"Three-Tier","text":"<p>Dedicated Database tier Frontend API &amp; Backend</p> <p>Technologies</p> <ul> <li>(Modern JS with Azure) React, Node.js, Azure Cosmos DB</li> </ul> <p>AWS</p> <ul> <li>ECS 2 various container, Database Lambda Function, Database - RDS, DynamoDB, ALB, VPC, CloudWatch</li> </ul>"},{"location":"Architecture/Two_Tier/two_tier/","title":"Two-Tier","text":"<p>Separate Frontend &amp; Backend</p> <p>Technologies</p> <ul> <li>(Familiar Stack) Flask (Python), Microsoft SQL Server (on-premises), RDS (AWS)</li> <li>(Modern JS) React, Node.js, DynamoDB (AWS)</li> <li>(Traditional Web Dev) HTML, CSS, JavaScript, PHP, MySQL</li> </ul> <p>AWS</p> <ul> <li>EC2 servers like Apache for PHP and  Nginx for react, node, Database - RDS, DynamoDB, ALB</li> </ul>"},{"location":"Security/intro/","title":"Intro","text":"<p>cracking....</p>"}]}